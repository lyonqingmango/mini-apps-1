// import React from 'react';
// import ReactDOM from 'react-dom';
class Form1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: '',
      email: '',
      password: ''
    };
    this.handleInputChange = this.handleInputChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleInputChange(event) {
    const target = event.target;
    const value = target.value;
    const name = target.name;
    this.setState({
      [name]: value
    });
  }

  handleSubmit(event) {
    event.preventDefault();
    var data = {};
    data.email = this.state.email;
    data.name = this.state.name;
    data.password = this.state.password;
    console.log('data in F1' + data.password);
    this.props.handleF1(data);
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, " email name password create "), /*#__PURE__*/React.createElement("form", {
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/React.createElement("label", null, "name", /*#__PURE__*/React.createElement("input", {
      name: "name",
      type: "text",
      value: this.state.name,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "Email:", /*#__PURE__*/React.createElement("input", {
      name: "email",
      type: "email",
      value: this.state.email,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "password:", /*#__PURE__*/React.createElement("input", {
      name: "password",
      type: "text",
      value: this.state.password,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("input", {
      type: "submit",
      value: "Next"
    })));
  }

}

class Form2 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      address: '',
      city: '',
      state: '',
      zipcode: '',
      phonenumber: ''
    };
    this.handleInputChange = this.handleInputChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleInputChange(event) {
    const target = event.target;
    const value = target.value;
    const name = target.name;
    this.setState({
      [name]: value
    });
  }

  handleSubmit(event) {
    event.preventDefault();
    var data = {};
    data.address = this.state.address;
    data.city = this.state.city;
    data.state = this.state.state;
    data.zipcode = this.state.zipcode;
    data.phonenumber = this.state.phonenumber;
    console.log('data in F2' + data);
    this.props.handleF2(data);
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, " ship to address (line 1, line 2, city, state, zip code) and phone number. create "), /*#__PURE__*/React.createElement("form", {
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/React.createElement("label", null, "address", /*#__PURE__*/React.createElement("input", {
      name: "address",
      type: "text",
      value: this.state.address,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "city:", /*#__PURE__*/React.createElement("input", {
      name: "city",
      type: "text",
      value: this.state.city,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "state:", /*#__PURE__*/React.createElement("input", {
      name: "state",
      type: "text",
      value: this.state.state,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "zip code:", /*#__PURE__*/React.createElement("input", {
      name: "zipcode",
      type: "text",
      value: this.state.zipcode,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("label", null, "phone number format 000-000-0000:", /*#__PURE__*/React.createElement("input", {
      name: "phonenumber",
      type: "tel",
      value: this.state.phonenumber,
      onChange: this.handleInputChange,
      pattern: "[0-9]{3}-[0-9]{3}-[0-9]{4}",
      required: "required"
    })), /*#__PURE__*/React.createElement("input", {
      type: "submit",
      value: "Next"
    })));
  }

}

class Form3 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      credit: '',
      expire: '',
      cvv: '',
      billing: ''
    };
    this.handleInputChange = this.handleInputChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleInputChange(event) {
    const target = event.target;
    const value = target.value;
    const name = target.name;
    this.setState({
      [name]: value
    });
  }

  handleSubmit(event) {
    event.preventDefault();
    var data = {};
    data.credit = this.state.credit;
    data.expire = this.state.expire;
    data.cvv = this.state.cvv;
    data.billing = this.state.billing;
    console.log('data in F3' + data);
    this.props.handleF3(data);
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, " credit card #, expiry date, CVV, and billing zip code. create "), /*#__PURE__*/React.createElement("form", {
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/React.createElement("label", null, "creditcard", /*#__PURE__*/React.createElement("input", {
      name: "credit",
      type: "text",
      value: this.state.credit,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "expire:", /*#__PURE__*/React.createElement("input", {
      name: "expire",
      type: "text",
      value: this.state.expire,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "CVV:", /*#__PURE__*/React.createElement("input", {
      name: "cvv",
      type: "text",
      value: this.state.cvv,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("label", null, "billing zip code:", /*#__PURE__*/React.createElement("input", {
      name: "billing",
      type: "text",
      value: this.state.billing,
      onChange: this.handleInputChange,
      required: "required"
    })), /*#__PURE__*/React.createElement("input", {
      type: "submit",
      value: "Next"
    })));
  }

}

class Purchase extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      info: {}
    };
  }

  componentDidMount() {
    this.display();
  }

  display() {
    axios.get('/user/form').then(response => {
      // handle success
      console.log("inside display response" + response.data.name);
      this.setState({
        info: response.data
      });
    }).catch(function (error) {
      // handle error
      console.log("err inside client display " + error);
    });
  }

  render() {
    console.log('info');
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h2", null, " Confirm Your Information:"));
  }

}

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      checkout: true,
      f1: false,
      f2: false,
      f3: false,
      form1Data: {},
      display: false,
      formId: null
    };
    this.checkOut = this.checkOut.bind(this);
    this.handleF1 = this.handleF1.bind(this);
    this.handleF2 = this.handleF2.bind(this);
    this.handleF3 = this.handleF3.bind(this);
  }

  checkOut() {
    this.setState({
      checkout: false
    });
    this.setState({
      f1: true
    });
    axios.post('/user/id', {}).then(function (response) {
      console.log(response);
    }).catch(function (error) {
      console.log(error);
    });
  }

  handleF1(data) {
    this.setState({
      f1: false
    });
    this.setState({
      f2: true
    });
    console.log('F1 data in APP:  ' + data.name);
    axios.post('/user/form1', {
      name: data.name,
      email: data.email,
      password: data.password
    }).then(response => {
      console.log(response);
    }).catch(function (error) {
      console.log(error);
    });
  }

  handleF2(data) {
    this.setState({
      f2: false
    });
    this.setState({
      f3: true
    });
    console.log('F2 data in APP:  ' + data.address);
    axios.post('/user/form2', {
      address: data.address,
      city: data.city,
      state: data.state,
      zipcode: data.zipcode,
      phonenumber: data.phonenumber
    }).then(function (response) {
      console.log(response);
    }).catch(function (error) {
      console.log(error);
    });
  }

  handleF3(data) {
    this.setState({
      f3: false
    });
    this.setState({
      display: true
    });
    console.log('F3 data in APP:  ' + data.cvv);
    axios.post('/user/form3', {
      credit: data.credit,
      expire: data.expire,
      cvv: data.cvv,
      billing: data.billing
    }).then(response => {
      console.log(response);
    }).catch(function (error) {
      console.log(error);
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, " check out Form "), this.state.checkout && /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: this.checkOut
    }, "check out"), this.state.f1 && /*#__PURE__*/React.createElement(Form1, {
      handleF1: this.handleF1
    }), this.state.f2 && /*#__PURE__*/React.createElement(Form2, {
      handleF2: this.handleF2
    }), this.state.f3 && /*#__PURE__*/React.createElement(Form3, {
      handleF3: this.handleF3
    }), this.state.display && /*#__PURE__*/React.createElement(Purchase, null));
  }

}

ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,